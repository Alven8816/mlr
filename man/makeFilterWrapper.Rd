% Generated by roxygen2 (4.0.1): do not edit by hand
\name{makeFilterWrapper}
\alias{makeFilterWrapper}
\title{Fuse learner with a feature filter method.}
\usage{
makeFilterWrapper(learner, fw.method = "random.forest.importance",
  fw.threshold = 0, fw.n = NULL, fw.percentage = NULL)
}
\arguments{
\item{learner}{[\code{\link{Learner}} | \code{character(1)}]\cr
The learner.
If you pass a string the learner will be created via \code{\link{makeLearner}}.}

\item{fw.method}{[\code{character(1)}]\cr
Filter method. Available are:
linear.correlation, rank.correlation, information.gain, gain.ratio, symmetrical.uncertainty,
chi.squared, random.forest.importance, relief, oneR
Default is random.forest.importance.}

\item{fw.threshold}{[\code{numeric(1)}]\cr
Information value as to be greater then the threshold. Default is 0.}

\item{fw.n}{[\code{integer(1)}]\cr
Number of features ordered by the information value to select.
This can decrease the number of features after threasholding.}

\item{fw.percentage}{[\code{numeric(1)}]\cr
Alternatively to \code{n} you can give a relative number of features.}
}
\value{
[\code{\link{Learner}}].
}
\description{
Fuses a base learner with a filter method. Creates a learner object, which can be
used like any other learner object.
Internally uses \code{\link{filterFeatures}} before every model fit.

After training, the selected features can be retrieved with
\code{\link{getFilteredFeatures}}.
}
\examples{
task = makeClassifTask(data = iris, target = "Species")
lrn = makeLearner("classif.lda")
inner = makeResampleDesc("Holdout")
outer = makeResampleDesc("CV", iters = 2)
lrn = makeFilterWrapper(lrn, fw.percentage = 0.5)
mod = train(lrn, task)
print(getFilteredFeatures(mod))
# now nested resampling, where we extract the features that the filter method selected
r = resample(lrn, task, outer, extract = function(model) {
  getFilteredFeatures(model)
})
print(r$extract)
}

