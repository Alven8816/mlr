% Generated by roxygen2 (4.0.1): do not edit by hand
\name{makeModelMultiplexer}
\alias{ModelMultiplexer}
\alias{makeModelMultiplexer}
\title{Create model multiplexer for model selection to tune over multiple possible models.}
\usage{
makeModelMultiplexer(base.learners, id = "ModelMultiplexer")
}
\arguments{
\item{base.learners}{[\code{list} of \code{\link{Learner}}]\cr
List of Learners with unique IDs.}

\item{id}{[\code{character(1)}]\cr
Identifier for constructed ModelMultiplexer.
Default is \dQuote{ModelMultiplexer}.}
}
\value{
[\code{ModelMultiplexer}]. A \code{\link{Learner}} specialized as \code{ModelMultiplexer}.
}
\description{
Combines multiple base learners by dispatching
on the hyperparameter \dQuote{selected.learner} to a specific model class.
This allows to tune not only the model class (SVM, random forest, etc) but also
their hyperparameters in one go. Combine this with \code{\link{tuneParams}} and
\code{\link{makeTuneControlIrace}} for a very powerful approach.

The parameter set is the union of all (unique) base learners.
In order to avoid name clashes all parameter names are prefixed
with the base learner id, i.e. \dQuote{[task.type].[learner.id].[parameter.name]}.
}
\examples{
bls = list(
  makeLearner("classif.ksvm"),
  makeLearner("classif.randomForest")
)
lrn = makeModelMultiplexer(bls)
rdesc = makeResampleDesc("CV", iters = 2L)
ps = makeParamSet(
  makeDiscreteParam("selected.learner", values = extractSubList(bls, "id")),
  makeNumerciParam("classif.ksvm.sigma", lower=-10, upper=10, requires = quote(selected.learner == "classif.ksvm")),
  makeIntegerParam("classif.randomForest.ntrees", lower=1, upper=500, requires = quote(selected.learner == "classif.randomForsest"))
)
ctrl = makeTuneControlIrace(maxit = 10)
res = tuneParams(lrn, iris.task, rdesc, par.set = ps, control = ctrl)
print(res)
print(head(as.data.frame(res$opt.path)))
}

